#lang racket

(require rackunit "solver.rkt" "tiles.rkt")

(define (mini-board)
  (list 
   (tile 0 0 0 (set 1))
   (tile 0 1 0 (set 2 3))
   (tile 0 2 0 (set 2 3))
   (tile 1 0 0 (set 1 2 3 4 5 6 7 8 9))
   (tile 1 1 0 (set 5))
   (tile 1 2 0 (set 6))
   (tile 2 0 0 (set 7))
   (tile 2 1 0 (set 8 9))
   (tile 2 2 0 (set 8 9))
   (tile 0 3 1 all)
   (tile 1 3 1 all)
   (tile 2 3 1 all)
   (tile 3 0 4 all)
   (tile 3 1 4 all)
   (tile 3 2 4 all)))

(define (before-mini-board)
  (list 
   (tile 0 0 0 (set 1))
   (tile 0 1 0 (set 2 3))
   (tile 0 2 0 (set 2 3))))
  
(define (focustile)
  (tile 1 0 0 (set 1 2 3 4 5 6 7 8 9)))
  
(define (after-mini-board)
  (list 
   (tile 1 1 0 (set 5))
   (tile 1 2 0 (set 6))
   (tile 2 0 0 (set 7))
   (tile 2 1 0 (set 8 9))
   (tile 2 2 0 (set 8 9))
   (tile 0 3 1 all)
   (tile 1 3 1 all)
   (tile 2 3 1 all)
   (tile 3 0 4 all)
   (tile 3 1 4 all)
   (tile 3 2 4 all)))

(define (mini-board-uv)
  (list 
   (tile 0 0 0 (set 1))
   (tile 0 1 0 (set 2 3))
   (tile 0 2 0 (set 2 3))
   (tile 1 0 0 (set 4))
   (tile 1 1 0 (set 5))
   (tile 1 2 0 (set 6))
   (tile 2 0 0 (set 7))
   (tile 2 1 0 (set 8 9))
   (tile 2 2 0 (set 8 9))
   (tile 0 3 1 all)
   (tile 1 3 1 all)
   (tile 2 3 1 all)
   (tile 3 0 4 all)
   (tile 3 1 4 all)
   (tile 3 2 4 all)))

(define (mini-board-rem)
  (list 
   (tile 0 0 0 (set 1))
   (tile 0 1 0 (set 2 3))
   (tile 0 2 0 (set 2 3))
   (tile 1 0 0 (set 2 3 4 8 9))
   (tile 1 1 0 (set 5))
   (tile 1 2 0 (set 6))
   (tile 2 0 0 (set 7))
   (tile 2 1 0 (set 8 9))
   (tile 2 2 0 (set 8 9))
   (tile 0 3 1 (set 2 3 4 5 6 7 8 9))
   (tile 1 3 1 (set 1 2 3 4 7 8 9))
   (tile 2 3 1 (set 1 2 3 4 5 6 8 9))
   (tile 3 0 4 (set 2 3 4 5 6 8 9))
   (tile 3 1 4 (set 1 2 3 4 6 7 8 9))
   (tile 3 2 4 (set 1 2 3 4 5 7 8 9))))

(define (mini-board-both)
  (list 
   (tile 0 0 0 (set 1))
   (tile 0 1 0 (set 2 3))
   (tile 0 2 0 (set 2 3))
   (tile 1 0 0 (set 4))
   (tile 1 1 0 (set 5))
   (tile 1 2 0 (set 6))
   (tile 2 0 0 (set 7))
   (tile 2 1 0 (set 8 9))
   (tile 2 2 0 (set 8 9))
   (tile 0 3 1 (set 2 3 4 5 6 7 8 9))
   (tile 1 3 1 (set 1 2 3 4 7 8 9))
   (tile 2 3 1 (set 1 2 3 4 5 6 8 9))
   (tile 3 0 4 (set 2 3 4 5 6 8 9))
   (tile 3 1 4 (set 1 2 3 4 6 7 8 9))
   (tile 3 2 4 (set 1 2 3 4 5 7 8 9))))

(define (solved-matrix)
  (list
   (list 6 2 9 1 7 8 4 3 5)
   (list 8 4 5 3 6 2 7 9 1)
   (list 1 3 7 5 9 4 8 2 6)
   (list 2 7 8 6 4 3 5 1 9)
   (list 3 9 1 2 8 5 6 7 4)
   (list 4 5 6 7 1 9 2 8 3)
   (list 9 6 3 8 5 7 1 4 2)
   (list 5 8 4 9 2 1 3 6 7)
   (list 7 1 2 4 3 6 9 5 8)))

(define (solved-board)
  (list
 (tile 0 0 0 (set 6))
 (tile 0 1 0 (set 2))
 (tile 0 2 0 (set 9))
 (tile 0 3 1 (set 1))
 (tile 0 4 1 (set 7))
 (tile 0 5 1 (set 8))
 (tile 0 6 2 (set 4))
 (tile 0 7 2 (set 3))
 (tile 0 8 2 (set 5))
 (tile 1 0 0 (set 8))
 (tile 1 1 0 (set 4))
 (tile 1 2 0 (set 5))
 (tile 1 3 1 (set 3))
 (tile 1 4 1 (set 6))
 (tile 1 5 1 (set 2))
 (tile 1 6 2 (set 7))
 (tile 1 7 2 (set 9))
 (tile 1 8 2 (set 1))
 (tile 2 0 0 (set 1))
 (tile 2 1 0 (set 3))
 (tile 2 2 0 (set 7))
 (tile 2 3 1 (set 5))
 (tile 2 4 1 (set 9))
 (tile 2 5 1 (set 4))
 (tile 2 6 2 (set 8))
 (tile 2 7 2 (set 2))
 (tile 2 8 2 (set 6))
 (tile 3 0 3 (set 2))
 (tile 3 1 3 (set 7))
 (tile 3 2 3 (set 8))
 (tile 3 3 4 (set 6))
 (tile 3 4 4 (set 4))
 (tile 3 5 4 (set 3))
 (tile 3 6 5 (set 5))
 (tile 3 7 5 (set 1))
 (tile 3 8 5 (set 9))
 (tile 4 0 3 (set 3))
 (tile 4 1 3 (set 9))
 (tile 4 2 3 (set 1))
 (tile 4 3 4 (set 2))
 (tile 4 4 4 (set 8))
 (tile 4 5 4 (set 5))
 (tile 4 6 5 (set 6))
 (tile 4 7 5 (set 7))
 (tile 4 8 5 (set 4))
 (tile 5 0 3 (set 4))
 (tile 5 1 3 (set 5))
 (tile 5 2 3 (set 6))
 (tile 5 3 4 (set 7))
 (tile 5 4 4 (set 1))
 (tile 5 5 4 (set 9))
 (tile 5 6 5 (set 2))
 (tile 5 7 5 (set 8))
 (tile 5 8 5 (set 3))
 (tile 6 0 6 (set 9))
 (tile 6 1 6 (set 6))
 (tile 6 2 6 (set 3))
 (tile 6 3 7 (set 8))
 (tile 6 4 7 (set 5))
 (tile 6 5 7 (set 7))
 (tile 6 6 8 (set 1))
 (tile 6 7 8 (set 4))
 (tile 6 8 8 (set 2))
 (tile 7 0 6 (set 5))
 (tile 7 1 6 (set 8))
 (tile 7 2 6 (set 4))
 (tile 7 3 7 (set 9))
 (tile 7 4 7 (set 2))
 (tile 7 5 7 (set 1))
 (tile 7 6 8 (set 3))
 (tile 7 7 8 (set 6))
 (tile 7 8 8 (set 7))
 (tile 8 0 6 (set 7))
 (tile 8 1 6 (set 1))
 (tile 8 2 6 (set 2))
 (tile 8 3 7 (set 4))
 (tile 8 4 7 (set 3))
 (tile 8 5 7 (set 6))
 (tile 8 6 8 (set 9))
 (tile 8 7 8 (set 5))
 (tile 8 8 8 (set 8))))

(define (halfsolver-uv before focustile after)
  (if (equal? 1 (set-count (tile-values focustile)))
  (tile-snapshot before focustile after #f)
  (uniqueval-iter before focustile after)))

(define (halfsolver-rem before focustile after)
  (if (equal? 1 (set-count (tile-values focustile)))
  (remove-iter before focustile after)
  (tile-snapshot before focustile after #f)))

    
(check-equal? ((uniqueval 1 0 0) (tile 0 1 0 (set 2 3)) 
                                 (uniqueval-struct (set 1 2 3 4 5 6 7 8 9) (set 1 2 3 4 5 6 7 8 9) (set 1 2 3 4 5 6 7 8 9)))
              (uniqueval-struct (set 1 2 3 4 5 6 7 8 9) (set 1 2 3 4 5 6 7 8 9) (set 1 4 5 6 7 8 9))
              "TEsting uniqueval")

(check-equal? (board-iter halfsolver-uv (mini-board))
              (board-snapshot (mini-board-uv) #t)
              "Testing uniqueval behaviour")

(check-equal? (board-iter halfsolver-rem (mini-board))
              (board-snapshot (mini-board-rem) #t)
              "Testing remove behaviour")

(check-equal? (board-iter focus (mini-board))
              (board-snapshot (mini-board-both) #t)
              "Testing remove behaviour")

(check-equal? (solve-board (test-board))
              (solved-board)
              "Testing solve-board works")

(check-equal? (solve (test-matrix))
              (solved-matrix)
              "Testing solve works")